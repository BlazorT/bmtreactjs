// /* eslint-disable no-debugger */
// import React, { useState, useMemo } from 'react';
// import './Grid.css';
// import 'react-data-grid/lib/styles.css';
// import DataGrid from 'react-data-grid';
// import moment from 'moment';
// import { NavLink, useNavigate } from 'react-router-dom';
// import _ from 'underscore';
// import Loading from '../../components/UI/Loading.js';
// import { Modal, ModalBody, ModalHeader } from 'reactstrap';
// import { ToastContainer, toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';

// const salerecord = () => {
//   const [sales, setSales] = useState([]);
//   const [isLoading, setIsLoading] = useState(false);
//   const [OrderDetail, setOderDetail] = useState([]);
//   const [allinvoices, setallinvoices] = useState([]);
//   const [modalOpen, setModalOpen] = useState(false);
//   const [filter, setfilter] = useState({ amount: '', invoice: '' });
//   const [invoicedetail, setinvoicedetail] = useState({
//     invno: '',
//     invtotal: '',
//     expence: '',
//     netdiscount: '',
//     tax: '',
//   });
//   const [filterrow, setfilterrow] = useState([]);
//   const navigate = useNavigate();
//   const [total, settotal] = useState({ totalinvoices: 0, totalitems: 0, totalamount: 0 });
//   const [dates, setDates] = useState({
//     FromDate: new Date().toISOString().substr(0, 10),
//     ToDate: new Date().toISOString().substr(0, 10),
//   });

//   React.useEffect(() => {
//     var id = getstoreid();
//     fetchData(id);
//   }, []);
//   const divElem = document.querySelector('body > div');
//   React.useEffect(() => {
//     calculateTotalValues();
//   }, [sales]);

//   const getstoreid = () => {
//     const cookies = document.cookie.split(';');
//     const user = { username: null, storeId: null };
//     for (const cookie of cookies) {
//       const [name, value] = cookie.trim().split('=');
//       if (name === 'loggedInUser') {
//         user.username = decodeURIComponent(value);
//       } else if (name === 'storeId') {
//         user.storeId = decodeURIComponent(value);
//       }
//     }
//     if (!user.username || !user.storeId) {
//       // Navigate to another page
//       navigate('/');
//     } else {
//       return user.storeId;
//     }
//   };
//   /*  *********GetData From APi************ */
//   const fetchData = async (storeid) => {
//     setIsLoading(true);
//     const data = {
//       storeid: storeid,
//       name: '',
//       remarks: '',
//       id: '',
//       datefrom: dates.FromDate,
//       dateto: dates.ToDate,
//       status: '1',
//     };
//     setSales([]);
//     try {
//       const response = await fetch('/BlazorApi/sales', {
//         method: 'POST',
//         headers: {
//           Authorization: `cVQ-h9G7QPCs3ErRdmsGNE:APA91bGlsWbE6ouc9jbIskdJOSF0SqwWq-9HXGGeewcs5ESpH-ryhoKYgcYIx19Iay_geMmufvWNb0M6woPo1jYNvIS0tiGZjXluSDuDbLeHyDeHJJ1ZGL_eq06EVb_0AyfsVeCjHND8`,
//           'Content-Type': 'application/json',
//         },
//         body: JSON.stringify(data),
//       });

//       const jsonData = await response.json();
//       /* console.log(jsonData);*/
//       if (jsonData.errorCode === '407') {
//         toast.error('Please wait 40 second for next request.!', {
//           position: toast.POSITION.TOP_RIGHT,
//           autoClose: 3000,
//         });
//       }
//       if (jsonData.data.length !== 0) {
//         setallinvoices(jsonData.data);
//         const uniqueInvoices = _.chain(jsonData.data)
//           .groupBy('saleinvoicecode')
//           .map((groupedRecords, invoiceNumber) => {
//             const { quantity, paidamount, username, saledate } = groupedRecords[0];
//             const totalItem = groupedRecords.length;
//             return { invoiceNumber, quantity, paidamount, username, saledate, totalItem };
//           })
//           .value();
//         setSales(uniqueInvoices);
//       }
//       setIsLoading(false);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };

//   /*  ****************Grid Columns***************** */
//   const columns = [
//     {
//       key: 'Invoice',
//       name: 'Invoice No',
//       sortable: true,
//       renderSummaryCell() {
//         return <strong>Total Invocies : {total.totalinvoices}</strong>;
//       },
//     },
//     {
//       key: 'Billamount',
//       name: 'Bill Amount',
//       renderSummaryCell() {
//         return <strong>Total Bill Amount: {total.totalamount}</strong>;
//       },
//     },
//     {
//       key: 'Itemno',
//       name: 'Items No',
//       align: 'center',
//       renderSummaryCell() {
//         return <strong>Total Items : {total.totalitems}</strong>;
//       },
//     },
//     {
//       key: 'Customer',
//       name: 'Customer',
//       align: 'center',
//     },
//     {
//       key: 'Generatedby',
//       name: 'Generated By',
//     },
//     {
//       key: 'Datetime',
//       name: 'Date & Time',
//       align: 'center',
//     },
//   ];

//   /* ***********Set Grid Rows***************/

//   var rows = sales.map((row, index) => ({
//     id: index,
//     Invoice: row.invoiceNumber.slice(-4),
//     Itemno: row.totalItem,
//     Billamount: row.paidamount,
//     Customer: row.username ? row.username : 'Walk-in Customer',
//     Generatedby: 'Waqas',
//     Datetime: moment(row.saledate).format('MM/DD/YYYY H:mm:ss '),
//   }));

//   /*  **********Date Change function**************/

//   const handleDateChange = (event) => {
//     const { name, value } = event.target;
//     setDates((prevDate) => ({
//       ...prevDate,
//       [name]: value,
//     }));
//   };

//   /*****************Seach button click function***************/
//   const FilterData = () => {
//     fetchData();
//   };

//   /*****************DataGrid Summary Row***************/
//   const summaryRows = useMemo(() => {
//     return [
//       {
//         id: 'total_0',
//         totalCount: rows.length,
//       },
//     ];
//   }, [rows]);

//   /*****************Input field change function***************/
//   const handelchange = (event) => {
//     const { name, value } = event.target;
//     setfilter((prevData) => ({
//       ...prevData,
//       [name]: value,
//     }));
//     var filteredRows = rows.filter((row) => row.Invoice === value);
//     if (filteredRows.length !== 0) {
//       setfilterrow(filteredRows);
//     }
//     if (value === '') {
//       setfilterrow([]);
//     }
//   };
//   const handelamount = (event) => {
//     const { name, value } = event.target;
//     setfilter((prevData) => ({
//       ...prevData,
//       [name]: value,
//     }));
//     var filteredamount = rows.filter((row) => row.Billamount >= Number(value));
//     if (filteredamount.length !== 0) {
//       setfilterrow(filteredamount);
//     }
//     if (value === '') {
//       setfilterrow([]);
//     }
//   };

//   /*****************Function to calculate total ***************/
//   const calculateTotalValues = () => {
//     const invoices = sales.reduce((count) => count + 1, 0);
//     var items = sales.reduce((sum, row) => sum + row.totalItem, 0);
//     const amount = sales.reduce((sum, row) => sum + Number(row.paidamount), 0);
//     settotal({ totalinvoices: invoices, totalamount: amount, totalitems: items });
//   };

//   /*****************Modal Window functions***************/
//   const handleCellDoubleClick = (args) => {
//     var detail = allinvoices.filter((item) => item.saleinvoicecode.slice(-4) === args.row.Invoice);
//     setinvoicedetail({
//       invno: detail[0].saleinvoicecode,
//       invtotal: detail[0].payableamount,
//       expence: detail[0].expence,
//       netdiscount: detail[0].netdiscount,
//       tax: detail[0].taxamount,
//     });
//     setOderDetail(detail);
//     toggleModal();
//   };
//   const toggleModal = () => {
//     setModalOpen(!modalOpen);
//   };

//   /*  *********** Handel Resize observer ************ */
//   const resizeObserver = new ResizeObserver((entries) => {
//     for (let entry of entries) {
//       if (entry.target.handleResize) entry.target.handleResize(entry);
//     }
//   });

//   resizeObserver.observe(divElem);

//   return (
//     <>
//       {isLoading && (
//         <div className="loading-overlay">
//           <Loading />
//         </div>
//       )}
//       <ToastContainer />
//       <Modal isOpen={modalOpen} toggle={toggleModal}>
//         <ModalHeader toggle={toggleModal} className="inv-m-header">
//           {/* <img src="BPOS-logon.png" alt="Company logo" />*/}
//           <h5>
//             <b>BEPOS</b>
//           </h5>
//         </ModalHeader>
//         <ModalBody>
//           <div>
//             <div className="row m-inv-number mt-2">
//               <div className="col-md-6">
//                 <h6>
//                   <b>Invoice No :</b> {invoicedetail.invno}
//                 </h6>
//               </div>
//               <div className="col-md-6">
//                 <h6>
//                   <b>Date :</b> {moment(OrderDetail.saledate).format('MM/DD/YYYY')}
//                 </h6>
//               </div>
//               <div className="col-md-6">
//                 <h6>
//                   <b>Net Discount :</b> {invoicedetail.netdiscount}
//                 </h6>
//               </div>
//               <div className="col-md-6">
//                 <h6>
//                   <b>Expenses :</b> {invoicedetail.expence}
//                 </h6>
//               </div>
//               <div className="col-md-6">
//                 <h6>
//                   <b>Tax :</b> {invoicedetail.expence}
//                 </h6>
//               </div>
//             </div>
//             <div className="row p-3">
//               <table className="m-inv-table">
//                 <tr className="inv-tr-border">
//                   <th>Item Name</th>
//                   <th className="text-center">Qty</th>
//                   <th className="text-center">Price</th>
//                   <th className="text-center">Disc</th>
//                   <th className="text-center">Amount</th>
//                 </tr>
//                 {OrderDetail.map((item, index) => (
//                   <tr key={index} className="inv-tr-data">
//                     <td>{item.productname}</td>
//                     <td className="text-center">{item.quantity}</td>
//                     <td className="text-center">{item.salerate}</td>
//                     <td className="text-center">{item.linediscount}</td>
//                     <td className="text-center">
//                       {item.salerate * item.quantity - item.linediscount}
//                     </td>
//                   </tr>
//                 ))}
//                 <tr className="m-inv-total">
//                   <td></td>
//                   <td></td>
//                   <td></td>
//                   <td className="text-center" colSpan="2">
//                     <b>Total </b> : <span>{invoicedetail.invtotal}</span>
//                   </td>
//                 </tr>
//               </table>
//               <div className="row m-inv-footer">
//                 <p>If you have any question please contact : info@blazortech.com </p>
//               </div>
//             </div>
//           </div>
//         </ModalBody>
//       </Modal>
//       <div className="row">
//         <div className="col-md-6 mb-2">
//           <div className="form-group">
//             <label className="lbl_Default" htmlFor="">
//               Invoice No
//             </label>
//             <br />
//             <input
//               type="number"
//               className="form-control txt_Default"
//               name="invoice"
//               id="invoice"
//               placeholder="Enter Invoice Number"
//               value={filter.invoice}
//               onChange={handelchange}
//               onKeyDown={(evt) =>
//                 ['e', 'E', '+', '-', '.'].includes(evt.key) && evt.preventDefault()
//               }
//               min={0}
//             />
//           </div>
//         </div>
//         <div className="col-md-6  mb-2">
//           <div className="form-group">
//             <label className="lbl_Default" htmlFor="">
//               Bill Amount
//             </label>
//             <br />
//             <input
//               type="number"
//               className="form-control txt_Default"
//               name="amount"
//               id="amount"
//               placeholder="Greater than Equal (>=)"
//               value={filter.amount}
//               onChange={handelamount}
//               onKeyDown={(evt) => ['e', 'E', '+', '-'].includes(evt.key) && evt.preventDefault()}
//               min={0}
//             />
//           </div>
//         </div>
//       </div>
//       <div className="row">
//         <div className="col-md-6 mb-3">
//           <div className="form-group">
//             <label className="lbl_Default" htmlFor="">
//               Sale Date (From)
//             </label>
//             <br />
//             <input
//               type="date"
//               className="form-control"
//               name="FromDate"
//               value={dates.FromDate}
//               onChange={handleDateChange}
//             />
//           </div>
//         </div>
//         <div className="col-md-6 mb-3 d-flex">
//           <div className="form-group flex-grow-1">
//             <label className="lbl_Default" htmlFor="">
//               Sale Date (To)
//             </label>
//             <br />
//             <input
//               type="date"
//               className="form-control"
//               name="ToDate"
//               value={dates.ToDate}
//               onChange={handleDateChange}
//             />
//           </div>
//           <button type="button" className="btn_Default salesgrid-btn " onClick={FilterData}>
//             Search
//           </button>
//         </div>
//       </div>
//       <div className="grid-div">
//         <DataGrid
//           className="saleGrid"
//           columns={columns}
//           rows={filterrow.length > 0 ? filterrow : rows}
//           bottomSummaryRows={summaryRows}
//           onCellDoubleClick={handleCellDoubleClick} // Set the cell click handler
//           rowKey="id"
//         />
//       </div>
//       <div className="row sales-text-style">
//         <div>
//           <button type="button" className="btn_Default m-2 sales-btn-style">
//             Cancel
//           </button>
//           <NavLink to="/addnew" activeclassname="active-link">
//             <button type="button" className="btn_Default sales-btn-style m-2">
//               Add+
//             </button>
//           </NavLink>
//           {/*<button type="button" className="btn btn-info sales-btn-style m-2">Edit</button>*/}
//           <button type="button" className="btn_Default sales-btn-style m-2">
//             Print
//           </button>
//         </div>
//       </div>
//     </>
//   );
// };

// export default salerecord;
