// userFormConfig.js

import {
  cilUser,
  cilEnvelopeClosed,
  cilScreenSmartphone,
  cilFlagAlt,
  cilInfo,
  cilDescription,
  cilCalendar,
  cilLink,
  cilItalic,
} from '@coreui/icons';
import { CFormCheck } from '@coreui/react';
import dayjs from 'dayjs';
import moment from 'moment';
import CustomInput from 'src/components/InputsComponent/CustomInput';
import CustomSelectInput from 'src/components/InputsComponent/CustomSelectInput';
import CustomDatePicker from 'src/components/UI/DatePicker';
import ImagePicker from 'src/components/UI/ImagePicker';
import { generateRandomNumbers } from 'src/helpers/generatePassowrd';
import globalutil from 'src/util/globalutil';

export const getDaAppllyInputs = (
  daUserData,
  handleUserInput,
  handleFocus,
  emailReadonly,
  emailMessage,
  canAdd,
  onBlur,
) => [
  {
    component: ImagePicker,
    image: daUserData.avatar,
    name: 'avatar',
    onChange: (e) => handleUserInput(e, 'avatar'),
  },
  {
    component: CustomInput,
    label: 'First Name',
    value: daUserData.firstName,
    onChange: handleUserInput,
    icon: cilUser,
    type: 'text',
    id: 'FirstName',
    name: 'firstName',
    placeholder: 'First Name',
    className: 'form-control item',
    isRequired: true,
    maxLength: 10,
    // pattern: '.*[A-Z].*',
    autoFocus: true,
    disabled: canAdd === 0,
    message: 'Enter First Name',
  },
  {
    component: CustomInput,
    label: 'Middle Name',
    value: daUserData.middleName,
    onChange: handleUserInput,
    icon: cilUser,
    type: 'text',
    id: 'middleName',
    name: 'middleName',
    placeholder: 'Middle Name',
    className: 'form-control item',
    isRequired: false,
    maxLength: 10,
    disabled: canAdd === 0,
    // pattern: '.*[A-Z].*',
    message: 'Enter Middle Name',
  },
  {
    component: CustomInput,
    label: 'Last Name',
    value: daUserData.lastName,
    onChange: handleUserInput,
    icon: cilUser,
    type: 'text',
    id: 'lastName',
    name: 'lastName',
    placeholder: 'Last Name',
    className: 'form-control item',
    isRequired: true,
    maxLength: 10,
    disabled: canAdd === 0,
    // pattern: '.*[A-Z].*,
    message: 'Enter Last Name',
  },
  {
    component: CustomInput,
    label: 'Email Address',
    value: daUserData.email,
    onChange: handleUserInput,
    icon: cilEnvelopeClosed,
    type: 'email',
    id: 'email',
    name: 'email',
    placeholder: 'Email Address',
    className: 'form-control item',
    isRequired: true,
    onBlur: onBlur,

    // pattern: '.*[A-Z].*',
    message: emailMessage,
    onClick: handleFocus,
    disabled: canAdd === 0,
    readOnly: emailReadonly,
  },
  {
    component: CustomInput,
    label: 'Contact',
    value: daUserData.primaryContact,
    onChange: handleUserInput,
    icon: cilScreenSmartphone,
    type: 'tel',
    id: 'primaryContact',
    name: 'primaryContact',
    placeholder: 'Enter Contact',
    className: 'form-control item',
    isRequired: true,
    maxLength: 14,
    pattern: '[0-9]{3}-[0-9]{3}-[0-9]{4}',
    message: 'Enter valid contact number Format: 123-456-7890',
    disabled: canAdd === 0,
  },
  {
    component: CFormCheck,
    name: 'isWhatsAppAsso',
    checked: daUserData.isWhatsAppAsso,
    onChange: handleUserInput,
    className: 'mt-5',
    id: 'isWhatsAppAsso',
    label: 'Is this whatsapp associated?',
  },
  {
    component: CustomInput,
    label: 'Licence #',
    value: daUserData.licenseNo,
    onChange: handleUserInput,
    icon: cilDescription,
    type: 'text',
    id: 'licenseNo',
    name: 'licenseNo',
    placeholder: 'Enter license number',
    className: 'form-control item',
    isRequired: true,
    maxLength: 12,
    disabled: canAdd === 0,
    message: 'enter valid license number',
    title: 'enter license number',
  },
  {
    component: CFormCheck,
    name: 'hasValidDrivingLicense',
    checked: daUserData.hasValidDrivingLicense,
    onChange: handleUserInput,
    className: 'mt-5',
    id: 'hasValidDrivingLicense',
    label: 'Has active & clean driving license?',
  },
  {
    component: CustomSelectInput,
    label: 'Lic. Issuing State',
    icon: cilFlagAlt,
    id: 'issuingStateId',
    options: globalutil.states(),
    className: 'form-control item form-select',
    value: daUserData.issuingStateId,
    name: 'issuingStateId',
    onChange: (e) => handleUserInput(e),
    isRequired: true,
    disabled: canAdd === 0,
    disableOption: 'Select Licence Issuing State',
    title: 'Select Licence Issuing State',
    message: 'please select your state',
  },
  {
    component: CustomSelectInput,
    label: 'Status',
    icon: cilInfo,
    id: 'status',
    options: globalutil.dastatuses(),
    className: 'form-control item form-select',
    value: daUserData.status,
    name: 'status',
    onChange: (e) => handleUserInput(e),
    isRequired: true,
    disabled: canAdd === 0,
    disableOption: 'Select Status',
    message: 'Please select status',
  },
  {
    component: CustomDatePicker,
    icon: cilCalendar,
    label: 'Date Of Birth',
    value: daUserData.dob,
    onChange: (e) => handleUserInput(e, 'dob'),
    isRequired: true,
    max: dayjs().subtract(21, 'years'),
    title: 'enter date of birth',
    message: 'DA age should be 21 or above',
  },
  {
    component: CustomInput,
    label: 'Mailing Address',
    value: daUserData.mailAddress,
    onChange: handleUserInput,
    icon: cilUser,
    type: 'text',
    id: 'mailAddress',
    name: 'mailAddress',
    placeholder: 'Enter Mailing Address',
    className: 'form-control item',
  },
  {
    component: CustomDatePicker,
    icon: cilCalendar,
    label: 'Licence Issue Date',
    value: daUserData.licenseIssueDate,
    onChange: (e) => handleUserInput(e, 'licenseIssueDate'),
    isRequired: true,
    max: dayjs().subtract(1, 'day'),
    message: 'Enter Valid Issue Date',
  },
  {
    component: CustomDatePicker,
    icon: cilCalendar,
    label: 'Licence Exp. Date',
    value: daUserData.licenseExpiryDate,
    onChange: (e) => handleUserInput(e, 'licenseExpiryDate'),
    isRequired: true,
    min: dayjs().add(1, 'day'),
    title: 'enter licence expiry date',
    message: 'Enter Valid Exp Date',
  },

  {
    component: CustomInput,
    label: 'Attach Licence (front)',
    value: daUserData.licenceImageFront,
    onChange: (e) => handleUserInput(e),
    icon: cilLink,
    type: 'file',
    id: 'licenceImageFront',
    name: 'licenceImageFront',
    placeholder: 'Licence copy upload',
    className: 'form-control item',
    accept: 'image/*',
    isRequired: false,
    title: 'Attach licence front side picture',
    message: 'enter valid email address',
  },
  {
    component: CustomInput,
    label: 'Attach Licence (back)',
    value: daUserData.licenceImageBack,
    onChange: (e) => handleUserInput(e),
    icon: cilLink,
    type: 'file',
    id: 'licenceImageBack',
    name: 'licenceImageBack',
    placeholder: 'Licence copy upload',
    className: 'form-control item',
    isRequired: false,
    accept: 'image/*',
    title: 'Attach licence back side picture',
    message: 'Licence copy upload',
  },
];

export const getDaAppllySsnInputs = (daIdentificationData, handleDAIdentification) => [
  {
    component: CustomSelectInput,
    label: 'Country',
    icon: cilFlagAlt,
    id: 'country',
    options: globalutil.countries(),
    className: 'form-control item form-select',
    value: daIdentificationData.ssnCountry,
    name: 'ssnCountry',
    onChange: (e) => handleDAIdentification(e),
    isRequired: false,
    message: 'Please select your country',
  },
  {
    component: CustomSelectInput,
    label: 'State / Province',
    icon: cilFlagAlt,
    options:
      daIdentificationData.ssnCountry === ''
        ? []
        : daIdentificationData.ssnCountry === 1
        ? globalutil.states().slice(0, 50)
        : globalutil.states().slice(50),
    className: 'form-control item form-select',
    value: daIdentificationData.ssnState,
    id: 'state',
    name: 'ssnState',
    onChange: (e) => handleDAIdentification(e),
    isRequired: false,
    message: 'Please select your state',
  },
  {
    component: CustomInput,
    label: 'SSN NO',
    value: daIdentificationData.ssnNo,
    onChange: (e) => handleDAIdentification(e),
    icon: cilItalic,
    type: 'text',
    id: 'ssnNo',
    name: 'ssnNo',
    placeholder: 'SSN NO',
    className: 'form-control item',
    isRequired: false,
    maxLength: 14,
    message: 'enter SSN NO',
  },
  {
    component: CustomInput,
    label: 'Attch Copy (Front)',
    value: daIdentificationData.ssnFront,
    onChange: (e) => handleDAIdentification(e),
    accept: 'image/*',
    icon: cilLink,
    type: 'file',
    id: 'ssnFront',
    name: 'ssnFront',
    placeholder: 'SSN copy front upload',
    className: 'form-control item',
    isRequired: false,
    message: 'SSN copy front upload',
  },
  {
    component: CustomInput,
    label: 'Attch Copy (Back)',
    value: daIdentificationData.ssnBack,
    onChange: (e) => handleDAIdentification(e),
    accept: 'image/*',
    icon: cilLink,
    type: 'file',
    id: 'ssnBack',
    name: 'ssnBack',
    placeholder: 'SSN copy back upload',
    className: 'form-control item',
    isRequired: false,
    message: 'SSN copy back upload',
  },
];
export const getDaAppllyIDInputs = (daIdentificationData, handleDAIdentification) => [
  {
    component: CustomSelectInput,
    label: 'Country',
    icon: cilFlagAlt,
    id: 'idCountry',
    options: globalutil.countries(),
    className: 'form-control item form-select',
    value: daIdentificationData.idCountry,
    name: 'idCountry',
    onChange: (e) => handleDAIdentification(e),
    isRequired: false,
    message: 'Please select your country',
  },
  {
    component: CustomSelectInput,
    label: 'State / Province',
    icon: cilFlagAlt,
    id: 'state',
    options:
      daIdentificationData.idCountry === ''
        ? []
        : daIdentificationData.idCountry === 1
        ? globalutil.states().slice(0, 50)
        : globalutil.states().slice(50),
    className: 'form-control item form-select',
    value: daIdentificationData.idState,
    name: 'idState',
    onChange: (e) => handleDAIdentification(e),
    isRequired: false,
    message: 'Please select your country',
  },
  {
    component: CustomInput,
    label: 'ID No',
    value: daIdentificationData.idNo,
    onChange: handleDAIdentification,
    icon: cilItalic,
    type: 'text',
    id: 'idNo',
    name: 'idNo',
    maxLength: 14,
    placeholder: 'ID NO',
    className: 'form-control item',
    isRequired: false,
    message: 'enter ID NO',
  },
  {
    component: CustomInput,
    label: 'Attach Copy (Front)',
    value: daIdentificationData.idFront,
    onChange: handleDAIdentification,
    accept: 'image/*',
    icon: cilLink,
    type: 'file',
    id: 'idFront',
    name: 'idFront',
    placeholder: 'id copy front upload',
    className: 'form-control item',
    isRequired: false,
    message: 'id copy front upload',
  },
  {
    component: CustomInput,
    label: 'Attach Copy (back)',
    value: daIdentificationData.idBack,
    onChange: handleDAIdentification,
    accept: 'image/*',
    icon: cilLink,
    type: 'file',
    id: 'idBack',
    name: 'idBack',
    placeholder: 'id copy back upload',
    className: 'form-control item',
    isRequired: false,
    message: 'id copy back upload',
  },
];
export const getDaAppllyBirthInputs = (daIdentificationData, handleDAIdentification) => [
  {
    component: CustomSelectInput,
    label: 'Country',
    icon: cilFlagAlt,
    id: 'bCertificateCountry',
    options: globalutil.countries(),
    className: 'form-control item form-select',
    value: daIdentificationData.bCertificateCountry,
    name: 'bCertificateCountry',
    onChange: (e) => handleDAIdentification(e),
    isRequired: false,
    message: 'Please select your country',
  },
  {
    component: CustomSelectInput,
    label: 'State / Province',
    icon: cilFlagAlt,
    id: 'state',
    options:
      daIdentificationData.bCertificateCountry === ''
        ? []
        : daIdentificationData.bCertificateCountry === 1
        ? globalutil.states().slice(0, 50)
        : globalutil.states().slice(50),
    className: 'form-control item form-select',
    value: daIdentificationData.bCertificateState,
    name: 'bCertificateState',
    onChange: (e) => handleDAIdentification(e),
    isRequired: false,
    message: 'Please select your country',
  },
  {
    component: CustomInput,
    label: 'Birth Certificate No',
    value: daIdentificationData.bCertificateNo,
    onChange: handleDAIdentification,
    icon: cilLink,
    type: 'text',
    id: 'bCertificateNo',
    name: 'bCertificateNo',
    placeholder: 'Birth Certificate No',
    className: 'form-control item',
    isRequired: false,
    maxLength: 14,
    message: 'Birth Certificate No',
  },
  {
    component: CustomInput,
    label: 'Attach Copy',
    value: daIdentificationData.bCertificateFile,
    onChange: handleDAIdentification,
    icon: cilLink,
    type: 'file',
    accept: 'image/*',
    id: 'bCertificateFile',
    name: 'bCertificateFile',
    placeholder: 'birth certificate copy upload',
    className: 'form-control item',
    isRequired: false,
    message: 'birth certificate copy upload',
  },
];

export const getInitialDaData = (user) => ({
  id: 0,
  avatar: '',
  firstName: '',
  lastName: '',
  middleName: '',
  dob: moment().subtract(21, 'years'),
  primaryContact: '',
  email: '',
  userId: generateRandomNumbers(14),
  isWhatsAppAsso: false,
  hasValidDrivingLicense: 2,
  dspId: user.dspId,
  licenceNo: '',
  issuingStateId: '',
  status: '',
  licenseIssueDate: moment().subtract(1, 'day'),
  licenseExpiryDate: moment().add(1, 'day'),
  licenceImageFront: '',
  licenceImageBack: '',
  isTermsAccepted: false,
  mailAddress: '',
  createdAt: moment().utc().format(),
});
export const getInitialDaIdentificationData = () => ({
  ssnCountry: '',
  idCountry: '',
  bCertificateCountry: '',
  ssnState: '',
  idState: '',
  bCertificateState: '',
  ssnNo: '',
  ssnFront: '',
  ssnBack: '',
  idNo: '',
  idFront: '',
  idBack: '',
  bCertificateNo: '',
  bCertificateFile: '',
  additionalInfo: '',
});
