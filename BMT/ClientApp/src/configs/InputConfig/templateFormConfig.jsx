/* eslint-disable react/react-in-jsx-scope */
// userFormConfig.js

import { cilFlagAlt, cilUser } from '@coreui/icons';
import CustomInput from 'src/components/InputsComponent/CustomInput';
import CustomSelectInput from 'src/components/InputsComponent/CustomSelectInput';
import globalutil from 'src/util/globalutil';

export const getTemplateInputFields = (templateData, handleTemplateData, loading) => [
  {
    component: CustomSelectInput,
    label: 'Network',
    icon: cilFlagAlt,
    id: 'networkId',
    options: globalutil?.networks(),
    className: 'form-control item form-select',
    value: templateData.networkId,
    name: 'networkId',
    onChange: (e) => handleTemplateData(e),
    isRequired: true,
    disableOption: 'Select Network',
    message: 'Select Network',
    disabled: loading || templateData?.id !== 0,
  },
  {
    component: CustomInput,
    label: 'Name',
    value: templateData.name,
    onChange: handleTemplateData,
    icon: cilUser,
    type: 'text',
    id: 'name',
    name: 'name',
    placeholder: 'Name',
    className: 'form-control item',
    isRequired: true,
    maxLength: 50,
    autoFocus: true,
    message: 'Enter Template Name',
    disabled: loading,
  },
  {
    component: CustomInput,
    label: 'Title',
    value: templateData.title,
    onChange: handleTemplateData,
    icon: cilUser,
    type: 'text',
    id: 'title',
    name: 'title',
    placeholder: 'Title',
    className: 'form-control item',
    isRequired: true,
    maxLength: 50,
    // pattern: '.*[A-Z].*',
    message: 'Enter Title',
    disabled: loading,
  },
  {
    component: CustomInput,
    label: 'Subject',
    value: templateData.subject,
    onChange: handleTemplateData,
    icon: cilUser,
    type: 'text',
    id: 'subject',
    name: 'subject',
    placeholder: 'Subject',
    className: 'form-control item',
    isRequired: templateData?.networkId === '3',
    maxLength: 50,
    // pattern: '.*[A-Z].*',
    message: 'Enter Subject',
    disabled: loading,
  },
  {
    component: CustomSelectInput,
    label: 'Status',
    icon: cilFlagAlt,
    id: 'status',
    options: globalutil?.statuses()?.filter((s) => s.id === 1 || s.id === 2),
    className: 'form-control item form-select',
    value: templateData.status,
    name: 'status',
    onChange: (e) => handleTemplateData(e),
    isRequired: true,
    disableOption: 'Select Status',
    message: 'Select Status',
    disabled: loading,
  },
];
