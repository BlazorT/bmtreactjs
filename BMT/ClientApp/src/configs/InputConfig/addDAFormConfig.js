// userFormConfig.js

import {
  cilUser,
  cilEnvelopeClosed,
  cilScreenSmartphone,
  cilFlagAlt,
  cilInfo,
  cilDescription,
  cilCalendar,
  cilLink,
  cilItalic,
} from '@coreui/icons';
import { CFormCheck } from '@coreui/react';
import dayjs from 'dayjs';
import CustomInput from 'src/components/InputsComponent/CustomInput';
import CustomSelectInput from 'src/components/InputsComponent/CustomSelectInput';
import CustomDatePicker from 'src/components/UI/DatePicker';
import ImagePicker from 'src/components/UI/ImagePicker';
import { generateRandomNumbers } from 'src/helpers/generatePassowrd';
import globalutil from 'src/util/globalutil';

export const getDaAppllyInputs = (
  daUserData,
  handleUserInput,
  handleFocus,
  emailReadonly,
  emailMessage,
  canAdd,
  onBlur,
  dspsListRes
) => [
  //{
  //  component: ImagePicker,
  //  image: daUserData.avatar,
  //  name: 'avatar',
  //  onChange: (e) => handleUserInput(e, 'avatar'),
  //},
  {
    component: CustomInput,
    label: 'First Name',
    value: daUserData.firstName,
    onChange: handleUserInput,
    icon: cilUser,
    type: 'text',
    id: 'FirstName',
    name: 'firstName',
    placeholder: 'First Name',
    className: 'form-control item',
    isRequired: true,
    maxLength: 10,
    // pattern: '.*[A-Z].*',
    autoFocus: true,
    disabled: canAdd === 0,
    message: 'Enter First Name',
  },
 
  {
    component: CustomInput,
    label: 'Last Name',
    value: daUserData.lastName,
    onChange: handleUserInput,
    icon: cilUser,
    type: 'text',
    id: 'lastName',
    name: 'lastName',
    placeholder: 'Last Name',
    className: 'form-control item',
    isRequired: true,
    maxLength: 10,
    disabled: canAdd === 0,
    // pattern: '.*[A-Z].*,
    message: 'Enter Last Name',
  },
  {
    component: CustomInput,
    label: 'Email Address',
    value: daUserData.email,
    onChange: handleUserInput,
    icon: cilEnvelopeClosed,
    type: 'email',
    id: 'email',
    name: 'email',
    placeholder: 'Email Address',
    className: 'form-control item',
    isRequired: true,
    onBlur: onBlur,

    // pattern: '.*[A-Z].*',
    message: emailMessage,
    onClick: handleFocus,
    disabled: canAdd === 0,
    readOnly: emailReadonly,
  },
  {
    component: CustomInput,
    label: 'Contact',
    value: daUserData.primaryContact,
    onChange: handleUserInput,
    icon: cilScreenSmartphone,
    type: 'tel',
    id: 'primaryContact',
    name: 'primaryContact',
    placeholder: 'Enter Contact',
    className: 'form-control item',
    isRequired: true,
    maxLength: 14,
    pattern: '[0-9]{3}-[0-9]{3}-[0-9]{4}',
    message: 'Enter valid contact number Format: 123-456-7890',
    disabled: canAdd === 0,
  },
  {
    component: CFormCheck,
    name: 'isWhatsAppAsso',
    checked: daUserData.isWhatsAppAsso,
    onChange: handleUserInput,
    className: 'mt-5',
    id: 'isWhatsAppAsso',
    label: 'Is this whatsapp associated?',
  },
 
  {
    component: CustomInput,
    label: 'Suffix',
    icon: cilFlagAlt,
    id: 'issuingStateId',
    className: 'form-control item form-select',
    value: daUserData.issuingStateId,
    name: 'issuingStateId',
    type:'text',
    onChange: (e) => handleUserInput(e),
    isRequired: true,
    disabled: canAdd === 0,
    title: 'Suffix',
    message: 'suffix',
  },
  {
    component: CustomSelectInput,
    label: 'Select Offering Type',
    icon: cilInfo,
    id: 'dspid',
    options: dspsListRes,
    className: 'form-control item form-select',
    value: daUserData.dspid,
    name: 'dspid',
    onChange: (e) => handleUserInput(e),
    isRequired: true,
    disabled: canAdd === 0,
    disableOption: 'Select Offering Type',
    message: 'Please Select Offering Type',
  },
 
];

dayjs.extend(utc);
export const getInitialDaData = (user) => ({
  id: 0,
  avatar: '',
  firstName: '',
  lastName: '',
  middleName: '',
  dspid: '',
  dob: dayjs().subtract(21, 'year').format(),
  primaryContact: '',
  email: '',
  userId: generateRandomNumbers(14),
  isWhatsAppAsso: false,
  hasValidDrivingLicense: 2,
  dspId: user.dspId,
  licenceNo: '',
  issuingStateId: '',
  status: '',
  licenseIssueDate: dayjs().subtract(1, 'day'),
  licenseExpiryDate: dayjs().add(1, 'day'),
  licenceImageFront: '',
  licenceImageBack: '',
  isTermsAccepted: false,
  mailAddress: '',
  createdAt: dayjs().utc().format(),
});
